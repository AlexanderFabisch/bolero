from representation.python.dmp_internal.rigid_body_dmp_cpp import RbDMP
from nose.tools import assert_true, assert_false, assert_equal, assert_almost_equal
import numpy as np

def test_determine_forces():
    numPhases = 50
    T = 1.0
    dt = T/(numPhases - 1)


    positions = np.asarray([[-0.563486, 0.22528, 0.0485744, -0.414966, 0.539828, -0.433371, 0.838053, 0.0519907, 0.326454, -0.871657, -0.873808, 0.804416, 0.0795207, 0.0250707, -0.921439, 0.86162, 0.477069, 0.375723, 0.76015, -0.542064, 0.37334, 0.314608, 0.84794, 0.368437, -0.56835, -0.70468, -0.136093, 0.572004, -0.547787, 0.112888, 0.813608, -0.00911187, 0.870008, 0.499542, -0.535477, -0.69522, 0.586941, -0.85094, 0.0431268, 0.595596, 0.93481, -0.813039, -0.843536, -0.0771591, 0.511162, 0.999987, -0.749063, 0.74108, 0.846138, -0.673737],
                            [0.0258648, -0.407937, -0.012834, 0.542715, -0.199543, -0.295083, -0.860489, -0.827888, 0.780465, -0.959954, -0.52344, 0.70184, -0.249586, 0.335448, -0.124725, 0.441905, 0.279958, -0.668052, 0.658402, 0.786745, 0.912937, 0.717353, -0.203127, 0.821944, 0.900505, 0.762124, 0.239193, -0.385084, -0.624934, -0.166997, -0.793658, 0.52095, 0.36889, -0.262673, 0.168977, 0.464297, -0.671796, 0.900208, -0.647579, 0.465309, 0.278917, -0.730195, -0.860187, 0.639355, -0.896122, -0.591343, 0.995598, -0.855342, 0.187784, -0.21662],
                            [0.678224, 0.275105, 0.94555, 0.05349, 0.783059, 0.615449, 0.898654, -0.615572, -0.302214, -0.0845965, 0.941268, -0.466669, 0.520497, 0.0632129, 0.86367, -0.431413, -0.291903, -0.119791, -0.339326, -0.29928, 0.17728, -0.12088, 0.629534, -0.0350187, 0.840257, 0.282161, -0.437881, -0.105933, -0.447531, -0.660786, -0.747849, 0.969503, -0.233623, -0.411679, -0.511175, -0.74905, 0.490143, -0.894941, -0.519875, 0.313127, 0.51947, 0.0404201, -0.59069, 0.146637, -0.684386, 0.779911, -0.891885, -0.991677, -0.639255, 0.826053]])

    rotations = np.asarray([[0.63939, -0.0948483, 0.514588, 0.755228, 0.495606, 0.662075, 0.967191, 0.660024, -0.503912, -0.366266, 0.266144, 0.942931, -0.773439, -0.0981649, -0.993537, -0.532217, -0.390089, -0.918271, 0.27528, 0.254316, -0.595574, -0.485469, 0.754768, -0.276798, -0.422444, -0.620498, -0.337042, 0.837861, 0.371572, 0.832546, 0.0960841, 0.747958, -0.452178, 0.697884, 0.368357, -0.0151566, -0.556069, -0.279115, 0.244191, -0.330057, -0.482188, 0.294415, -0.817703, -0.469077, -0.685456, -0.584313, -0.211223, 0.277308, -0.727851, 0.548772],
                            [-0.281809, 0.374775, -0.39141, 0.495619, 0.666477, 0.958868, 0.333761, 0.777898, 0.258959, -0.342446, -0.552687, -0.439916, -0.0570331, -0.327298, -0.310114, 0.350952, 0.424175, -0.172033, -0.305768, 0.461459, 0.841829, 0.0648819, 0.37225, 0.153381, 0.551534, 0.968726, -0.623598, 0.529743, -0.232336, 0.723834, -0.405423, -0.00371215, 0.729158, -0.00804521, 0.455101, 0.676267, -0.00294904, -0.350386, 0.673656, -0.211346, -0.69754, -0.272803, -0.145345, 0.317493, 0.766073, 0.115121, -0.511346, 0.969689, -0.178424, -0.412644],
                            [0.10497, -0.80072, 0.984457, 0.25782, 0.850753, 0.487622, -0.00548296, -0.846011, -0.541726, -0.537144, 0.302264, 0.0922138, 0.18508, 0.695369, 0.196963, -0.0340994, -0.634888, 0.391968, -0.630755, -0.343251, 0.369513, -0.824713, -0.81252, 0.186423, -0.423241, -0.992843, -0.127006, 0.398151, 0.548547, -0.592904, 0.809865, 0.152399, -0.0152024, -0.417893, -0.721884, 0.448504, -0.757482, 0.863791, 0.636255, 0.317662, -0.85491, -0.423461, 0.868989, 0.523556, 0.251331, -0.147601, -0.347973, -0.323514, -0.989183, -0.770664],
                            [0.15886, 0.061616, 0.153942, -0.929158, 0.746543, 0.806733, -0.672064, 0.299414, 0.40124, -0.851678, 0.0213719, 0.438537, 0.888636, -0.130973, 0.666487, -0.0361284, 0.243646, 0.347873, 0.218212, 0.480877, 0.306261, -0.479006, -0.777449, 0.333113, -0.340716, 0.654782, 0.917274, -0.757714, 0.886103, 0.587314, 0.819286, -0.674487, -0.0726757, -0.639158, 0.206218, -0.643585, -0.723523, 0.816969, -0.00785116, 0.217766, -0.784303, -0.337228, 0.167141, -0.0251463, 0.0354294, 0.659878, 0.45872, 0.795121, 0.566564, 0.73107]])

    forces = np.asarray([[0, -262.781, 596.231, 2068.96, 1828.72, 2700.54, 2631.44, 1933.62, 2536.07, 4512.47, 6340.55, 3699.22, 3098.74, 5334.96, 6981.65, 5527.87, 4551.96, 5486.45, 4690.84, 6255.45, 6540.36, 5179.4, 4186.82, 3459.93, 5056.65, 5964.55, 4322.37, 2498.62, 4006.55, 3944.34, 1722.44, 2415.78, 1119.9, -706.625, 1360.95, 1443.05, -1150.49, 4.28879, 972.572, -2079.71, -3467.02, -1123.81, 1068.39, 82.2536, -1434.85, -1524.13, 2012.41, 1856.24, -952.149, 3.79714e-11],
                        [0, 381.371, -242.43, -1902.84, -1648.63, -1061.69, 197.337, 505.256, -2185.57, -142.891, 1831.84, -744.392, 111.752, 1162.94, 1260.48, 935.256, 997.463, 3610.21, 3144.09, 1851.17, 2003.32, 2468.2, 4475.25, 3953.14, 2386.73, 2452.71, 2605.93, 3575.25, 3700.71, 3252.37, 4000.2, 2571.9, 1137.34, 2799.2, 1790.54, 710.973, 1620.31, 180.277, 340.158, -6.8155, -2434.31, -33.5368, 429.704, -2492.58, -691.592, 901.208, -1978.17, 171.639, 1538.68, -1.26647e-10],
                        [0, -763.28, -1984.21, -1767.71, -1908.03, -3826.43, -4673.24, -3368.54, -2143.57, -3949.14, -5460.04, -4343.91, -3843.16, -5208.7, -5946.28, -5193.12, -4073.27, -5167.27, -4550.33, -4104.27, -4316.61, -4004.14, -3960.57, -3434.9, -3970.48, -4247.27, -2294.38, -2522.68, -2625.32, -652.951, 56.4087, -2298.21, -1969.26, 108.507, 501.258, 904.697, -690.462, 775.739, 2750.75, 740.083, -417.8, 452.573, 1339.66, 805.909, 404.767, -1696.23, -1751.81, 669.309, 320.177, -3.75167e-11],
                        [-3468.92, -2166.89, 1760.43, 1645.86, -1292.77, -1537.28, 2120.53, 1236.18, 1727.32, 204.389, -440.053, -2611.04, -1199.19, -41.0256, -1628.92, 1769.43, 1142.43, -1505.47, -1092.25, 1193.82, 1149.7, -4155.64, 1439.82, 1877.73, 330.394, -1149.94, -1450.38, 780.549, -369.161, -458.399, -752.627, -258.34, -961.84, 1329.59, 4371.1, 2397.96, 1176.77, -2440.59, -1817.66, -318.988, 2966.38, 601.152, 166.847, -2004.18, 3792.54, 29.7698, -2814.27, 347.95, 0.502583, 1071.84],
                        [5183.29, 5823.53, 1375.99, -2029.91, -906.026, 859.331, -2679.36, -2306.75, 777.9, 285.79, 5799.42, 845.625, -1196.21, 220.35, 2876.5, -653.071, -1806.87, 2400.14, 691.298, -1383.45, 1573.57, -285.213, -4685.55, 1902.02, 1138.79, -137.774, 3196.67, -2979.55, -1502.34, 3177.43, 3726.95, 643.606, -2369.67, 618.557, -953.716, -188.942, -2040.21, -1134.88, 5025.62, 1315.38, -4836.06, -2197.56, -183.423, 2927.55, -313.109, 297.262, 1235.64, -1512.3, 256.409, 7093.94],
                        [-2798.77, -1051.86, 365.728, -794.254, 328.074, -3416.02, -417.273, -846.585, -3191.73, 48.3067, 3200.08, -1336.51, -531.837, -625.093, -1180.86, 1916.48, -1383.34, -2838.46, 2062.44, 4154.9, -3563.54, -962.696, -186.224, 152.046, -2018.68, -289.85, 2258.55, -1946.88, 1734.03, -1268.56, -1991.29, 157.026, -40.3893, -1736.59, 307.671, 476.48, 3713.79, 1430.74, -2546.52, 520.205, 1637.93, -6227.02, -685.51, 752.645, -952.285, -696.65, 1480.42, 711.207, -3475.11, -3606.27]])


    forces2 = RbDMP._determine_forces(positions, rotations, dt, T)
    np.testing.assert_allclose(forces, forces2, rtol=1e-03, atol=1e-10)

def test_determine_forces2():
    numPhases = 50
    T = 1.0
    dt = T/(numPhases - 1)
    positions = np.asarray([[-0.563486, 0.22528, 0.0485744, -0.414966, 0.539828, -0.433371, 0.838053, 0.0519907, 0.326454, -0.871657, -0.873808, 0.804416, 0.0795207, 0.0250707, -0.921439, 0.86162, 0.477069, 0.375723, 0.76015, -0.542064, 0.37334, 0.314608, 0.84794, 0.368437, -0.56835, -0.70468, -0.136093, 0.572004, -0.547787, 0.112888, 0.813608, -0.00911187, 0.870008, 0.499542, -0.535477, -0.69522, 0.586941, -0.85094, 0.0431268, 0.595596, 0.93481, -0.813039, -0.843536, -0.0771591, 0.511162, 0.999987, -0.749063, 0.74108, 0.846138, -0.673737],
                            [0.0258648, -0.407937, -0.012834, 0.542715, -0.199543, -0.295083, -0.860489, -0.827888, 0.780465, -0.959954, -0.52344, 0.70184, -0.249586, 0.335448, -0.124725, 0.441905, 0.279958, -0.668052, 0.658402, 0.786745, 0.912937, 0.717353, -0.203127, 0.821944, 0.900505, 0.762124, 0.239193, -0.385084, -0.624934, -0.166997, -0.793658, 0.52095, 0.36889, -0.262673, 0.168977, 0.464297, -0.671796, 0.900208, -0.647579, 0.465309, 0.278917, -0.730195, -0.860187, 0.639355, -0.896122, -0.591343, 0.995598, -0.855342, 0.187784, -0.21662],
                            [0.678224, 0.275105, 0.94555, 0.05349, 0.783059, 0.615449, 0.898654, -0.615572, -0.302214, -0.0845965, 0.941268, -0.466669, 0.520497, 0.0632129, 0.86367, -0.431413, -0.291903, -0.119791, -0.339326, -0.29928, 0.17728, -0.12088, 0.629534, -0.0350187, 0.840257, 0.282161, -0.437881, -0.105933, -0.447531, -0.660786, -0.747849, 0.969503, -0.233623, -0.411679, -0.511175, -0.74905, 0.490143, -0.894941, -0.519875, 0.313127, 0.51947, 0.0404201, -0.59069, 0.146637, -0.684386, 0.779911, -0.891885, -0.991677, -0.639255, 0.826053],
                            [0.63939, -0.0948483, 0.514588, 0.755228, 0.495606, 0.662075, 0.967191, 0.660024, -0.503912, -0.366266, 0.266144, 0.942931, -0.773439, -0.0981649, -0.993537, -0.532217, -0.390089, -0.918271, 0.27528, 0.254316, -0.595574, -0.485469, 0.754768, -0.276798, -0.422444, -0.620498, -0.337042, 0.837861, 0.371572, 0.832546, 0.0960841, 0.747958, -0.452178, 0.697884, 0.368357, -0.0151566, -0.556069, -0.279115, 0.244191, -0.330057, -0.482188, 0.294415, -0.817703, -0.469077, -0.685456, -0.584313, -0.211223, 0.277308, -0.727851, 0.548772],
                            [-0.281809, 0.374775, -0.39141, 0.495619, 0.666477, 0.958868, 0.333761, 0.777898, 0.258959, -0.342446, -0.552687, -0.439916, -0.0570331, -0.327298, -0.310114, 0.350952, 0.424175, -0.172033, -0.305768, 0.461459, 0.841829, 0.0648819, 0.37225, 0.153381, 0.551534, 0.968726, -0.623598, 0.529743, -0.232336, 0.723834, -0.405423, -0.00371215, 0.729158, -0.00804521, 0.455101, 0.676267, -0.00294904, -0.350386, 0.673656, -0.211346, -0.69754, -0.272803, -0.145345, 0.317493, 0.766073, 0.115121, -0.511346, 0.969689, -0.178424, -0.412644],
                            [0.10497, -0.80072, 0.984457, 0.25782, 0.850753, 0.487622, -0.00548296, -0.846011, -0.541726, -0.537144, 0.302264, 0.0922138, 0.18508, 0.695369, 0.196963, -0.0340994, -0.634888, 0.391968, -0.630755, -0.343251, 0.369513, -0.824713, -0.81252, 0.186423, -0.423241, -0.992843, -0.127006, 0.398151, 0.548547, -0.592904, 0.809865, 0.152399, -0.0152024, -0.417893, -0.721884, 0.448504, -0.757482, 0.863791, 0.636255, 0.317662, -0.85491, -0.423461, 0.868989, 0.523556, 0.251331, -0.147601, -0.347973, -0.323514, -0.989183, -0.770664],
                            [0.15886, 0.061616, 0.153942, -0.929158, 0.746543, 0.806733, -0.672064, 0.299414, 0.40124, -0.851678, 0.0213719, 0.438537, 0.888636, -0.130973, 0.666487, -0.0361284, 0.243646, 0.347873, 0.218212, 0.480877, 0.306261, -0.479006, -0.777449, 0.333113, -0.340716, 0.654782, 0.917274, -0.757714, 0.886103, 0.587314, 0.819286, -0.674487, -0.0726757, -0.639158, 0.206218, -0.643585, -0.723523, 0.816969, -0.00785116, 0.217766, -0.784303, -0.337228, 0.167141, -0.0251463, 0.0354294, 0.659878, 0.45872, 0.795121, 0.566564, 0.73107]])

    expected_forces = np.asarray([[0, -262.781, 596.231, 2068.96, 1828.72, 2700.54, 2631.44, 1933.62, 2536.07, 4512.47, 6340.55, 3699.22, 3098.74, 5334.96, 6981.65, 5527.87, 4551.96, 5486.45, 4690.84, 6255.45, 6540.36, 5179.4, 4186.82, 3459.93, 5056.65, 5964.55, 4322.37, 2498.62, 4006.55, 3944.34, 1722.44, 2415.78, 1119.9, -706.625, 1360.95, 1443.05, -1150.49, 4.28879, 972.572, -2079.71, -3467.02, -1123.81, 1068.39, 82.2536, -1434.85, -1524.13, 2012.41, 1856.24, -952.149, 3.79714e-11],
                                  [0, 381.371, -242.43, -1902.84, -1648.63, -1061.69, 197.337, 505.256, -2185.57, -142.891, 1831.84, -744.392, 111.752, 1162.94, 1260.48, 935.256, 997.463, 3610.21, 3144.09, 1851.17, 2003.32, 2468.2, 4475.25, 3953.14, 2386.73, 2452.71, 2605.93, 3575.25, 3700.71, 3252.37, 4000.2, 2571.9, 1137.34, 2799.2, 1790.54, 710.973, 1620.31, 180.277, 340.158, -6.8155, -2434.31, -33.5368, 429.704, -2492.58, -691.592, 901.208, -1978.17, 171.639, 1538.68, -1.26647e-10],
                                  [0, -763.28, -1984.21, -1767.71, -1908.03, -3826.43, -4673.24, -3368.54, -2143.57, -3949.14, -5460.04, -4343.91, -3843.16, -5208.7, -5946.28, -5193.12, -4073.27, -5167.27, -4550.33, -4104.27, -4316.61, -4004.14, -3960.57, -3434.9, -3970.48, -4247.27, -2294.38, -2522.68, -2625.32, -652.951, 56.4087, -2298.21, -1969.26, 108.507, 501.258, 904.697, -690.462, 775.739, 2750.75, 740.083, -417.8, 452.573, 1339.66, 805.909, 404.767, -1696.23, -1751.81, 669.309, 320.177, -3.75167e-11],
                                  [-3468.92, -2166.89, 1760.43, 1645.86, -1292.77, -1537.28, 2120.53, 1236.18, 1727.32, 204.389, -440.053, -2611.04, -1199.19, -41.0256, -1628.92, 1769.43, 1142.43, -1505.47, -1092.25, 1193.82, 1149.7, -4155.64, 1439.82, 1877.73, 330.394, -1149.94, -1450.38, 780.549, -369.161, -458.399, -752.627, -258.34, -961.84, 1329.59, 4371.1, 2397.96, 1176.77, -2440.59, -1817.66, -318.988, 2966.38, 601.152, 166.847, -2004.18, 3792.54, 29.7698, -2814.27, 347.95, 0.502583, 1071.84],
                                  [5183.29, 5823.53, 1375.99, -2029.91, -906.026, 859.331, -2679.36, -2306.75, 777.9, 285.79, 5799.42, 845.625, -1196.21, 220.35, 2876.5, -653.071, -1806.87, 2400.14, 691.298, -1383.45, 1573.57, -285.213, -4685.55, 1902.02, 1138.79, -137.774, 3196.67, -2979.55, -1502.34, 3177.43, 3726.95, 643.606, -2369.67, 618.557, -953.716, -188.942, -2040.21, -1134.88, 5025.62, 1315.38, -4836.06, -2197.56, -183.423, 2927.55, -313.109, 297.262, 1235.64, -1512.3, 256.409, 7093.94],
                                  [-2798.77, -1051.86, 365.728, -794.254, 328.074, -3416.02, -417.273, -846.585, -3191.73, 48.3067, 3200.08, -1336.51, -531.837, -625.093, -1180.86, 1916.48, -1383.34, -2838.46, 2062.44, 4154.9, -3563.54, -962.696, -186.224, 152.046, -2018.68, -289.85, 2258.55, -1946.88, 1734.03, -1268.56, -1991.29, 157.026, -40.3893, -1736.59, 307.671, 476.48, 3713.79, 1430.74, -2546.52, 520.205, 1637.93, -6227.02, -685.51, 752.645, -952.285, -696.65, 1480.42, 711.207, -3475.11, -3606.27]])

    rbf_centers = np.asarray([1, 0.829601643194907, 0.68823888639169, 0.570964111061179, 0.473672764741673, 0.392959703966367, 0.326000016119882, 0.27045014905462, 0.22436588805802, 0.186134309409818, 0.154417328941334, 0.1281048698275, 0.106276010510163, 0.0881667529514306, 0.0731432831236663, 0.0606797878680638, 0.0503400517240641, 0.0417621896288002, 0.03464598113947, 0.028742362883404, 0.0238447114773763, 0.0197816118231398, 0.0164108576735206, 0.0136144744921904, 0.0112945904099563])
    rbf_widths = np.asarray([79.3021357521556, 115.224724031393, 167.41966533669, 243.25807310081, 353.450056238711, 513.557230239902, 746.190371387455, 1084.20257288801, 1575.3288492202, 2288.9274064117, 3325.77459900897, 4832.29684455261, 7021.24936573615, 10201.7620691956, 14822.9957227229, 21537.573676543, 31293.7471311169, 45469.3097845492, 66066.1736551044, 95993.0846126371, 139476.403485294, 202656.964381283, 294457.300202516, 427841.707326799, 427841.707326799])

    dmp = RbDMP(rbf_centers, rbf_widths, execution_time=T, dt=dt)
    actual_forces = dmp.determine_forces(positions)
    np.testing.assert_allclose(actual_forces, expected_forces, rtol=1e-03, atol=1e-10)



def test_get_activations():

    expected_activations = np.asarray([0.965961 , 0.0340389 , 8.27878e-08 , 3.45603e-20 , 2.89697e-43 , 6.26613e-83 , 5.88026e-148 , 2.3514e-251 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0])
    rbf_centers = np.asarray([1, 0.829601643194907, 0.68823888639169, 0.570964111061179, 0.473672764741673, 0.392959703966367, 0.326000016119882, 0.27045014905462, 0.22436588805802, 0.186134309409818, 0.154417328941334, 0.1281048698275, 0.106276010510163, 0.0881667529514306, 0.0731432831236663, 0.0606797878680638, 0.0503400517240641, 0.0417621896288002, 0.03464598113947, 0.028742362883404, 0.0238447114773763, 0.0197816118231398, 0.0164108576735206, 0.0136144744921904, 0.0112945904099563])
    rbf_widths = np.asarray([79.3021357521556, 115.224724031393, 167.41966533669, 243.25807310081, 353.450056238711, 513.557230239902, 746.190371387455, 1084.20257288801, 1575.3288492202, 2288.9274064117, 3325.77459900897, 4832.29684455261, 7021.24936573615, 10201.7620691956, 14822.9957227229, 21537.573676543, 31293.7471311169, 45469.3097845492, 66066.1736551044, 95993.0846126371, 139476.403485294, 202656.964381283, 294457.300202516, 427841.707326799, 427841.707326799])
    T = 5.0
    dt = 0.01
    dmp = RbDMP(rbf_centers, rbf_widths, execution_time=T, dt=dt)
    activations = dmp.get_activations(1.0, True)
    np.testing.assert_allclose(activations, expected_activations, rtol=1e-03, atol=1e-10)

def test_get_phases():
    T = 5.0
    dt = 0.01
    rbf_centers = np.asarray([1, 0.829601643194907, 0.68823888639169, 0.570964111061179, 0.473672764741673, 0.392959703966367, 0.326000016119882, 0.27045014905462, 0.22436588805802, 0.186134309409818, 0.154417328941334, 0.1281048698275, 0.106276010510163, 0.0881667529514306, 0.0731432831236663, 0.0606797878680638, 0.0503400517240641, 0.0417621896288002, 0.03464598113947, 0.028742362883404, 0.0238447114773763, 0.0197816118231398, 0.0164108576735206, 0.0136144744921904, 0.0112945904099563])
    rbf_widths = np.asarray([79.3021357521556, 115.224724031393, 167.41966533669, 243.25807310081, 353.450056238711, 513.557230239902, 746.190371387455, 1084.20257288801, 1575.3288492202, 2288.9274064117, 3325.77459900897, 4832.29684455261, 7021.24936573615, 10201.7620691956, 14822.9957227229, 21537.573676543, 31293.7471311169, 45469.3097845492, 66066.1736551044, 95993.0846126371, 139476.403485294, 202656.964381283, 294457.300202516, 427841.707326799, 427841.707326799])
    dmp = RbDMP(rbf_centers, rbf_widths, execution_time=T, dt=dt)
    phases = dmp.get_phases()
    for i in range(1, len(phases)):
        assert_true(phases[i - 1] > phases[i])

def test_calc_centers():

    num_phases = 12;
    num_centers = 14;
    s_num_phases = 0.01;
    execution_time = 0.5;
    overlap = 0.2;
    dt = execution_time/(num_phases - 1);

    expected_centers = np.asarray([1, 0.701704, 0.492388, 0.345511, 0.242446, 0.170125, 0.119378, 0.0837678, 0.0587802, 0.0412463, 0.0289427, 0.0203092, 0.014251, 0.01])
    expected_widths = np.asarray([18.0875, 36.7342, 74.6042, 151.515, 307.715, 624.943, 1269.21, 2577.66, 5235.01, 10631.9, 21592.5, 43852.5, 89060.8, 89060.8])

    actual_centers, actual_widths = RbDMP.calculate_centers(s_num_phases, execution_time, dt, num_centers, overlap)
    np.testing.assert_allclose(expected_centers, actual_centers, rtol=1e-03, atol=1e-10)
    np.testing.assert_allclose(expected_widths, actual_widths, rtol=1e-03, atol=1e-10)


def test_execute_step():
