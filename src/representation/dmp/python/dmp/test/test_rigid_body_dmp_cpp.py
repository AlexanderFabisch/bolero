from dmp import RbDMP
from nose.tools import assert_true, assert_false, assert_equal, assert_almost_equal
import numpy as np


def test_determine_forces():
    n_phases = 50
    T = 1.0
    dt = T / float(n_phases - 1)

    positions = np.asarray(
        [[-0.563486, 0.22528, 0.0485744, -0.414966, 0.539828, -0.433371,
           0.838053, 0.0519907, 0.326454, -0.871657, -0.873808, 0.804416,
           0.0795207, 0.0250707, -0.921439, 0.86162, 0.477069, 0.375723,
           0.76015, -0.542064, 0.37334, 0.314608, 0.84794, 0.368437,
          -0.56835, -0.70468, -0.136093, 0.572004, -0.547787, 0.112888,
           0.813608, -0.00911187, 0.870008, 0.499542, -0.535477, -0.69522,
           0.586941, -0.85094, 0.0431268, 0.595596, 0.93481, -0.813039,
          -0.843536, -0.0771591, 0.511162, 0.999987, -0.749063, 0.74108,
           0.846138, -0.673737],
         [ 0.0258648, -0.407937, -0.012834, 0.542715, -0.199543, -0.295083,
          -0.860489, -0.827888, 0.780465, -0.959954, -0.52344, 0.70184,
          -0.249586, 0.335448, -0.124725, 0.441905, 0.279958, -0.668052,
           0.658402, 0.786745, 0.912937, 0.717353, -0.203127, 0.821944,
           0.900505, 0.762124, 0.239193, -0.385084, -0.624934, -0.166997,
          -0.793658, 0.52095, 0.36889, -0.262673, 0.168977, 0.464297,
          -0.671796, 0.900208, -0.647579, 0.465309, 0.278917, -0.730195,
          -0.860187, 0.639355, -0.896122, -0.591343, 0.995598, -0.855342,
           0.187784, -0.21662],
         [ 0.678224, 0.275105, 0.94555, 0.05349, 0.783059, 0.615449,
           0.898654, -0.615572, -0.302214, -0.0845965, 0.941268, -0.466669,
           0.520497, 0.0632129, 0.86367, -0.431413, -0.291903, -0.119791,
          -0.339326, -0.29928, 0.17728, -0.12088, 0.629534, -0.0350187,
           0.840257, 0.282161, -0.437881, -0.105933, -0.447531, -0.660786,
          -0.747849, 0.969503, -0.233623, -0.411679, -0.511175, -0.74905,
           0.490143, -0.894941, -0.519875, 0.313127, 0.51947, 0.0404201,
          -0.59069, 0.146637, -0.684386, 0.779911, -0.891885, -0.991677,
          -0.639255, 0.826053]])

    rotations = np.asarray(
        [[ 0.63939, -0.0948483, 0.514588, 0.755228, 0.495606, 0.662075,
           0.967191, 0.660024, -0.503912, -0.366266, 0.266144, 0.942931,
          -0.773439, -0.0981649, -0.993537, -0.532217, -0.390089, -0.918271,
           0.27528, 0.254316, -0.595574, -0.485469, 0.754768, -0.276798,
          -0.422444, -0.620498, -0.337042, 0.837861, 0.371572, 0.832546,
           0.0960841, 0.747958, -0.452178, 0.697884, 0.368357, -0.0151566,
          -0.556069, -0.279115, 0.244191, -0.330057, -0.482188, 0.294415,
          -0.817703, -0.469077, -0.685456, -0.584313, -0.211223, 0.277308,
          -0.727851, 0.548772],
         [-0.281809, 0.374775, -0.39141, 0.495619, 0.666477, 0.958868,
           0.333761, 0.777898, 0.258959, -0.342446, -0.552687, -0.439916,
          -0.0570331, -0.327298, -0.310114, 0.350952, 0.424175, -0.172033,
          -0.305768, 0.461459, 0.841829, 0.0648819, 0.37225, 0.153381,
           0.551534, 0.968726, -0.623598, 0.529743, -0.232336, 0.723834,
          -0.405423, -0.00371215, 0.729158, -0.00804521, 0.455101, 0.676267,
          -0.00294904, -0.350386, 0.673656, -0.211346, -0.69754, -0.272803,
          -0.145345, 0.317493, 0.766073, 0.115121, -0.511346, 0.969689,
          -0.178424, -0.412644],
         [ 0.10497, -0.80072, 0.984457, 0.25782, 0.850753, 0.487622,
          -0.00548296, -0.846011, -0.541726, -0.537144, 0.302264, 0.0922138,
           0.18508, 0.695369, 0.196963, -0.0340994, -0.634888, 0.391968,
          -0.630755, -0.343251, 0.369513, -0.824713, -0.81252, 0.186423,
          -0.423241, -0.992843, -0.127006, 0.398151, 0.548547, -0.592904,
           0.809865, 0.152399, -0.0152024, -0.417893, -0.721884, 0.448504,
          -0.757482, 0.863791, 0.636255, 0.317662, -0.85491, -0.423461,
           0.868989, 0.523556, 0.251331, -0.147601, -0.347973, -0.323514,
          -0.989183, -0.770664],
         [ 0.15886, 0.061616, 0.153942, -0.929158, 0.746543, 0.806733,
          -0.672064, 0.299414, 0.40124, -0.851678, 0.0213719, 0.438537,
           0.888636, -0.130973, 0.666487, -0.0361284, 0.243646, 0.347873,
           0.218212, 0.480877, 0.306261, -0.479006, -0.777449, 0.333113,
          -0.340716, 0.654782, 0.917274, -0.757714, 0.886103, 0.587314,
           0.819286, -0.674487, -0.0726757, -0.639158, 0.206218, -0.643585,
          -0.723523, 0.816969, -0.00785116, 0.217766, -0.784303, -0.337228,
           0.167141, -0.0251463, 0.0354294, 0.659878, 0.45872, 0.795121,
           0.566564, 0.73107]])

    forces = np.asarray(
        [[0.000000000000000000e+00, -4.027031950163003557e+02,
          2.765603842597436142e+02, 1.531960864598174794e+03,
          1.039670537760178377e+03, 1.628184972217578206e+03,
          1.248447787272333471e+03, 2.170481015260355662e+02,
          4.677407807494104759e+02, 2.079251209076806390e+03,
          3.534617579125701013e+03, 5.182446809161901911e+02,
          -4.540165022595064102e+02, 1.419346087182446354e+03,
          2.717705792361997737e+03, 9.357041941797117488e+02,
          -3.429265386137400355e+02, 3.195418524269089176e+02,
          -7.124622897139485076e+02, 6.559654539316586579e+02,
          7.890745113848315668e+02, -6.755795290357809790e+02,
          -1.720592102219391109e+03, -2.446047989768655043e+03,
          -7.921289840051344981e+02, 2.299340000252429945e+02,
          -1.240728859703442140e+03, -2.836057210702480006e+03,
          -1.044202883224123070e+03, -7.693530534844934436e+02,
          -2.604465465456710717e+03, -1.479153135428749010e+03,
          -2.303600742946581249e+03, -3.626185271774584180e+03,
          -1.030441069196100216e+03, -4.056013333313985640e+02,
          -2.452912422140640047e+03, -7.610059541420389451e+02,
          7.211351291503441416e+02, -1.856353520029081665e+03,
          -2.825436567502829803e+03, -1.398137846308609369e+02,
          2.297887841558951550e+03, 1.437357061690100636e+03,
          -9.896389209263634257e+01, -3.792557439793831691e+02,
          2.765426535650466576e+03, 1.985369742596362812e+03,
          -1.712374170592956943e+03, -4.192202140984591097e-11],
         [0.000000000000000000e+00, 2.567247602454704065e+02,
          -5.272021158551526696e+02, -2.381217083756069769e+03,
          -2.351534777762110025e+03, -2.016975353761271890e+03,
          -1.034667956957267506e+03, -1.023906770652060231e+03,
          -4.028097470828412042e+03, -2.310466339232419614e+03,
          -6.677521604560616879e+02, -3.578084395769739785e+03,
          -3.053130422204811111e+03, -2.325195839136152699e+03,
          -2.537941270114671624e+03, -3.155560029699881852e+03,
          -3.363024427792415281e+03, -9.926008689665852671e+02,
          -1.669306419302908580e+03, -3.136993557720680201e+03,
          -3.120061779560474406e+03, -2.747568193416712802e+03,
          -7.872099942202028160e+02, -1.308052371070678419e+03,
          -2.823499485819338133e+03, -2.655820453901381370e+03,
          -2.349815421168566900e+03, -1.177012575221748648e+03,
          -7.986273079934020416e+02, -9.467003345801965679e+02,
          1.456893544244844634e+02, -8.977999994019911583e+02,
          -1.912394758644075864e+03, 1.983820226194773113e+02,
          -3.397779097670557462e+02, -9.358514388687560768e+02,
          4.600840535073533601e+02, -5.014659440204003431e+02,
          1.161734967594039745e+02, 1.921556288184876848e+02,
          -1.862768438943443698e+03, 8.430303957184860337e+02,
          1.524967917062023844e+03, -1.285419116474817201e+03,
          4.984437153935168681e+02, 1.921086538467959599e+03,
          -1.307359692768279501e+03, 2.866667292685402799e+02,
          8.614492639293470120e+02, -1.580957587066222914e-11],
         [0.000000000000000000e+00, -6.674495592089563161e+02,
         -1.765269250905689205e+03, -1.399923162020666268e+03,
         -1.367620603798706725e+03, -3.091986966763505734e+03,
         -3.726050691432160420e+03, -2.192890904154693544e+03,
         -7.270041892035869751e+02, -2.282671103363290058e+03,
         -3.538306896519761722e+03, -2.165317477149992555e+03,
         -1.409941875161518738e+03, -2.526958322056964789e+03,
         -3.025976460898548794e+03, -2.048029049297636448e+03,
         -7.208526713542373727e+02, -1.628547951246524917e+03,
         -8.497078511204215374e+02, -2.692813541790424097e+02,
         -3.776604613722779504e+02, 5.837234713698990163e+00,
         8.531227151692274902e+01, 6.099987885100733820e+02,
         3.523865736098719026e+01, -3.197386500819110893e+02,
         1.515678249295963951e+03, 1.130945060535664197e+03,
         8.338489521654018972e+02, 2.575370964360758990e+03,
         3.019825829155422525e+03, 3.693579314765170238e+02,
         3.754270176800464469e+02, 2.108058676086531250e+03,
         2.139080928516286804e+03, 2.170804546324980038e+03,
         2.015412949392782593e+02, 1.299874306392015114e+03,
         2.922949033107687683e+03, 5.871106287134437025e+02,
         -8.572113363013173739e+02, -2.213483179735500812e+02,
         4.976009787932487143e+02, -1.221766320852780723e+02,
         -5.101538199887993414e+02, -2.480327495431823536e+03,
         -2.267536998853243404e+03, 5.808737100437349454e+02,
         8.408405490530277575e+02, -1.945466010511154309e-11],
        [-3.468926440572829961e+03, -2.166895721824466818e+03,
         1.760431630812476669e+03, 1.645860491238169288e+03,
         -1.292768552427364284e+03, -1.537280599564888689e+03,
         2.120530247445466102e+03, 1.236184139346693655e+03,
         1.727323545895339976e+03, 2.043921370348406299e+02,
         -4.400541835273762672e+02, -2.611042366361110908e+03,
         -1.199194251451433047e+03, -4.102641342218390719e+01,
         -1.628921728162296404e+03, 1.769429992735703081e+03,
         1.142432399123886171e+03, -1.505466564047985230e+03,
         -1.092246367276952014e+03, 1.193816968939781646e+03,
         1.149703751039625786e+03, -4.155635400281607872e+03,
         1.439814716389785190e+03, 1.877732330814874103e+03,
         3.303943767599656667e+02, -1.149938017325861892e+03,
         -1.450379894863767959e+03, 7.805482100098644196e+02,
         -3.691617012923275070e+02, -4.583975808710974889e+02,
         -7.526255050565290503e+02, -2.583401827946935327e+02,
         -9.618402398145905181e+02, 1.329590948649753500e+03,
         4.371099609232524926e+03, 2.397963897007773539e+03,
         1.176770979680014761e+03, -2.440586066445784127e+03,
         -1.817652976529567468e+03, -3.189811171449132416e+02,
         2.966377536637095545e+03, 6.011515468035207732e+02,
         1.668531313840696839e+02, -2.004183773506772923e+03,
         3.792542367994617962e+03, 2.976963207750463880e+01,
         -2.814272514956720897e+03, 3.479500373245648461e+02,
         5.026449769767964426e-01, 1.071832243340556033e+03],
        [5.183287046647636089e+03, 5.823532546562660173e+03,
         1.375989826856211039e+03, -2.029909156715326844e+03,
         -9.060250297841582778e+02, 8.593326036713808662e+02,
         -2.679359193732702806e+03, -2.306752603546438877e+03,
         7.778998508273077732e+02, 2.857899643766327245e+02,
         5.799424065221081037e+03, 8.456241929245143183e+02,
         -1.196210278868469231e+03, 2.203507412486748080e+02,
         2.876498803041989504e+03, -6.530727265631435330e+02,
         -1.806871544502750567e+03, 2.400137085516902971e+03,
         6.913011690798525706e+02, -1.383443352824690237e+03,
         1.573566425625037937e+03, -2.852137487063339449e+02,
         -4.685546957484604718e+03, 1.902023183314021026e+03,
         1.138787728510634679e+03, -1.377731129434811237e+02,
         3.196674910733425349e+03, -2.979549095528762336e+03,
         -1.502341371357407979e+03, 3.177433838982527050e+03,
         3.726946861597948555e+03, 6.436063931634719211e+02,
         -2.369673030246002327e+03, 6.185555008248712738e+02,
         -9.537162384563789601e+02, -1.889399755090244639e+02,
         -2.040209303544927479e+03, -1.134885166545991751e+03,
         5.025625048891391089e+03, 1.315381240342707542e+03,
         -4.836058538299968859e+03, -2.197559672734649212e+03,
         -1.834197207193544727e+02, 2.927545809704653948e+03,
         -3.131072065326366669e+02, 2.972614179890499599e+02,
         1.235637994699626233e+03, -1.512296195839385746e+03,
         2.564073836012908032e+02, 7.093937417915882179e+03],
        [-2.798767563328311553e+03, -1.051854552231093521e+03,
         3.657288031565562960e+02, -7.942534375094303414e+02,
         3.280733387750990460e+02, -3.416020554830066885e+03,
         -4.172742729225785752e+02, -8.465875130691154027e+02,
         -3.191728981451527943e+03, 4.830811752898080158e+01,
         3.200072848664245612e+03, -1.336507575100770282e+03,
         -5.318357640926266185e+02, -6.250921004805610437e+02,
         -1.180855720886008612e+03, 1.916475195678939599e+03,
         -1.383339802187360192e+03, -2.838462722447560282e+03,
         2.062443700625608471e+03, 4.154902438267125945e+03,
         -3.563539510228024028e+03, -9.626954402390776977e+02,
         -1.862218679567375830e+02, 1.520451762568883964e+02,
         -2.018680794510124315e+03, -2.898500556813819458e+02,
         2.258547822861767145e+03, -1.946879588054210899e+03,
         1.734032415685021988e+03, -1.268563947141744620e+03,
         -1.991295225213878211e+03, 1.570271156344214205e+02,
         -4.039027625578796687e+01, -1.736587022629615603e+03,
         3.076706177695265296e+02, 4.764800780508860498e+02,
         3.713793921617951128e+03, 1.430741808026797116e+03,
         -2.546520220192898250e+03, 5.201999685443786348e+02,
         1.637927509498765403e+03, -6.227015476905362448e+03,
         -6.855090861242429128e+02, 7.526451230614167116e+02,
         -9.522848094775329173e+02, -6.966507178968415701e+02,
         1.480415328295529662e+03, 7.112079451365068508e+02,
         -3.475108675872356798e+03, -3.606272097020495494e+03]])

    actual_forces = RbDMP._determine_forces(positions, rotations, dt, T)
    np.testing.assert_allclose(forces, actual_forces, rtol=1e-03, atol=1e-10)


def test_get_activations():
    expected_activations = np.asarray(
        [0.965961, 0.0340389, 8.27878e-08, 3.45603e-20, 2.89697e-43,
         6.26613e-83, 5.88026e-148, 2.3514e-251, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    rbf_centers = np.asarray(
        [1, 0.829601643194907, 0.68823888639169, 0.570964111061179,
         0.473672764741673, 0.392959703966367, 0.326000016119882,
         0.27045014905462, 0.22436588805802, 0.186134309409818,
         0.154417328941334, 0.1281048698275, 0.106276010510163,
         0.0881667529514306, 0.0731432831236663, 0.0606797878680638,
         0.0503400517240641, 0.0417621896288002, 0.03464598113947,
         0.028742362883404, 0.0238447114773763, 0.0197816118231398,
         0.0164108576735206, 0.0136144744921904, 0.0112945904099563])
    rbf_widths = np.asarray(
        [79.3021357521556, 115.224724031393, 167.41966533669, 243.25807310081,
         353.450056238711, 513.557230239902, 746.190371387455, 1084.20257288801,
         1575.3288492202, 2288.9274064117, 3325.77459900897, 4832.29684455261,
         7021.24936573615, 10201.7620691956, 14822.9957227229, 21537.573676543,
         31293.7471311169, 45469.3097845492, 66066.1736551044, 95993.0846126371,
         139476.403485294, 202656.964381283, 294457.300202516, 427841.707326799,
         427841.707326799])
    T = 5.0
    dt = 0.01
    dmp = RbDMP(rbf_centers, rbf_widths, execution_time=T, dt=dt)
    activations = dmp.get_activations(1.0, True)
    np.testing.assert_allclose(activations, expected_activations,
                               rtol=1e-03, atol=1e-10)


def test_get_phases():
    T = 5.0
    dt = 0.01
    rbf_centers = np.asarray(
        [1, 0.829601643194907, 0.68823888639169, 0.570964111061179,
         0.473672764741673, 0.392959703966367, 0.326000016119882,
         0.27045014905462, 0.22436588805802, 0.186134309409818,
         0.154417328941334, 0.1281048698275, 0.106276010510163,
         0.0881667529514306, 0.0731432831236663, 0.0606797878680638,
         0.0503400517240641, 0.0417621896288002, 0.03464598113947,
         0.028742362883404, 0.0238447114773763, 0.0197816118231398,
         0.0164108576735206, 0.0136144744921904, 0.0112945904099563])
    rbf_widths = np.asarray(
        [79.3021357521556, 115.224724031393, 167.41966533669, 243.25807310081,
         353.450056238711, 513.557230239902, 746.190371387455, 1084.20257288801,
         1575.3288492202, 2288.9274064117, 3325.77459900897, 4832.29684455261,
         7021.24936573615, 10201.7620691956, 14822.9957227229, 21537.573676543,
         31293.7471311169, 45469.3097845492, 66066.1736551044, 95993.0846126371,
         139476.403485294, 202656.964381283, 294457.300202516, 427841.707326799,
         427841.707326799])
    dmp = RbDMP(rbf_centers, rbf_widths, execution_time=T, dt=dt)
    phases = dmp.get_phases()
    for i in range(1, len(phases)):
        assert_true(phases[i - 1] > phases[i])


def test_calc_centers():
    num_phases = 12;
    num_centers = 14;
    s_num_phases = 0.01;
    execution_time = 0.5;
    overlap = 0.2;
    dt = execution_time/(num_phases - 1);

    expected_centers = np.asarray(
        [1, 0.701704, 0.492388, 0.345511, 0.242446, 0.170125, 0.119378,
         0.0837678, 0.0587802, 0.0412463, 0.0289427, 0.0203092, 0.014251, 0.01])
    expected_widths = np.asarray(
        [18.0875, 36.7342, 74.6042, 151.515, 307.715, 624.943, 1269.21, 2577.66,
         5235.01, 10631.9, 21592.5, 43852.5, 89060.8, 89060.8])

    actual_centers, actual_widths = RbDMP.calculate_centers(
        s_num_phases, execution_time, dt, num_centers, overlap)
    np.testing.assert_allclose(expected_centers, actual_centers,
                               rtol=1e-03, atol=1e-10)
    np.testing.assert_allclose(expected_widths, actual_widths,
                               rtol=1e-03, atol=1e-10)
